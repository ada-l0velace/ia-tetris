;;deve retornar IGNORE
(progn (setf t1 (array->tabuleiro #2A((T T T T T NIL T T T NIL) (T T T T T NIL NIL T NIL NIL) (NIL T T T T NIL NIL NIL NIL NIL) (NIL T T T NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)))) 'IGNORE)
;;deve retornar IGNORE
'IGNORE
;;deve retornar IGNORE
(progn (setf e1 (make-estado :pontos 0 :tabuleiro t1  :pecas-por-colocar '(z j l o z))) 'IGNORE)
;;deve retornar IGNORE
(progn (setf p1 (make-problema :estado-inicial e1 :solucao #'solucao :accoes #'accoes :resultado #'resultado :custo-caminho #'custo-oportunidade)) 'IGNORE)
;;retorna tempo
(progn (setf a1 (time (procura-RBFS p1 #'heuristicas))) 'RBFS)
